//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var pagination_ttypes = require('./pagination_types')


var ttypes = module.exports = {};
if (typeof nexx === 'undefined') {
  nexx = {};
}
if (typeof nexx.models === 'undefined') {
  nexx.models = {};
}
nexx.models.NotificationInsert = module.exports.NotificationInsert = function(args) {
  this.title = null;
  this.message = null;
  this.audience = null;
  this.type = null;
  this.subjectId = null;
  this.subjectType = null;
  this.isRead = false;
  this.metadata = null;
  this.status = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field title is unset!');
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
    if (args.audience !== undefined && args.audience !== null) {
      this.audience = Thrift.copyList(args.audience, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.subjectType !== undefined && args.subjectType !== null) {
      this.subjectType = args.subjectType;
    }
    if (args.isRead !== undefined && args.isRead !== null) {
      this.isRead = args.isRead;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
nexx.models.NotificationInsert.prototype = {};
nexx.models.NotificationInsert.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.audience = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.audience.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.subjectType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isRead = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.models.NotificationInsert.prototype.write = function(output) {
  output.writeStructBegin('NotificationInsert');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.audience !== null && this.audience !== undefined) {
    output.writeFieldBegin('audience', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.audience.length);
    for (var iter7 in this.audience)
    {
      if (this.audience.hasOwnProperty(iter7))
      {
        iter7 = this.audience[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 5);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.subjectType !== null && this.subjectType !== undefined) {
    output.writeFieldBegin('subjectType', Thrift.Type.STRING, 6);
    output.writeString(this.subjectType);
    output.writeFieldEnd();
  }
  if (this.isRead !== null && this.isRead !== undefined) {
    output.writeFieldBegin('isRead', Thrift.Type.BOOL, 7);
    output.writeBool(this.isRead);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 8);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 9);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.models.NotificationForm = module.exports.NotificationForm = function(args) {
  this.uid = null;
  this.title = null;
  this.message = null;
  this.audience = null;
  this.type = null;
  this.subjectId = null;
  this.subjectType = null;
  this.isRead = false;
  this.metadata = null;
  this.status = null;
  this.userRead = null;
  this.userDeleted = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uid is unset!');
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.audience !== undefined && args.audience !== null) {
      this.audience = Thrift.copyList(args.audience, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.subjectType !== undefined && args.subjectType !== null) {
      this.subjectType = args.subjectType;
    }
    if (args.isRead !== undefined && args.isRead !== null) {
      this.isRead = args.isRead;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.userRead !== undefined && args.userRead !== null) {
      this.userRead = Thrift.copyList(args.userRead, [null]);
    }
    if (args.userDeleted !== undefined && args.userDeleted !== null) {
      this.userDeleted = Thrift.copyList(args.userDeleted, [null]);
    }
  }
};
nexx.models.NotificationForm.prototype = {};
nexx.models.NotificationForm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.audience = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.audience.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.subjectType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isRead = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.userRead = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString();
          this.userRead.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.userDeleted = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = input.readString();
          this.userDeleted.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.models.NotificationForm.prototype.write = function(output) {
  output.writeStructBegin('NotificationForm');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.audience !== null && this.audience !== undefined) {
    output.writeFieldBegin('audience', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.audience.length);
    for (var iter29 in this.audience)
    {
      if (this.audience.hasOwnProperty(iter29))
      {
        iter29 = this.audience[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 6);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.subjectType !== null && this.subjectType !== undefined) {
    output.writeFieldBegin('subjectType', Thrift.Type.STRING, 7);
    output.writeString(this.subjectType);
    output.writeFieldEnd();
  }
  if (this.isRead !== null && this.isRead !== undefined) {
    output.writeFieldBegin('isRead', Thrift.Type.BOOL, 8);
    output.writeBool(this.isRead);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 9);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 10);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.userRead !== null && this.userRead !== undefined) {
    output.writeFieldBegin('userRead', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.userRead.length);
    for (var iter30 in this.userRead)
    {
      if (this.userRead.hasOwnProperty(iter30))
      {
        iter30 = this.userRead[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userDeleted !== null && this.userDeleted !== undefined) {
    output.writeFieldBegin('userDeleted', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.userDeleted.length);
    for (var iter31 in this.userDeleted)
    {
      if (this.userDeleted.hasOwnProperty(iter31))
      {
        iter31 = this.userDeleted[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.models.Notification = module.exports.Notification = function(args) {
  this.uid = null;
  this.title = null;
  this.message = null;
  this.audience = null;
  this.type = null;
  this.subjectId = null;
  this.subjectType = null;
  this.isRead = false;
  this.metadata = null;
  this.createdAt = null;
  this.updatedAt = null;
  this.status = null;
  this.userRead = null;
  this.userDeleted = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.audience !== undefined && args.audience !== null) {
      this.audience = Thrift.copyList(args.audience, [null]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.subjectType !== undefined && args.subjectType !== null) {
      this.subjectType = args.subjectType;
    }
    if (args.isRead !== undefined && args.isRead !== null) {
      this.isRead = args.isRead;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.userRead !== undefined && args.userRead !== null) {
      this.userRead = Thrift.copyList(args.userRead, [null]);
    }
    if (args.userDeleted !== undefined && args.userDeleted !== null) {
      this.userDeleted = Thrift.copyList(args.userDeleted, [null]);
    }
  }
};
nexx.models.Notification.prototype = {};
nexx.models.Notification.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.audience = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.audience.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.subjectType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.isRead = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.updatedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.userRead = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readString();
          this.userRead.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.userDeleted = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = input.readString();
          this.userDeleted.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.models.Notification.prototype.write = function(output) {
  output.writeStructBegin('Notification');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.audience !== null && this.audience !== undefined) {
    output.writeFieldBegin('audience', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.audience.length);
    for (var iter53 in this.audience)
    {
      if (this.audience.hasOwnProperty(iter53))
      {
        iter53 = this.audience[iter53];
        output.writeString(iter53);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 6);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.subjectType !== null && this.subjectType !== undefined) {
    output.writeFieldBegin('subjectType', Thrift.Type.STRING, 7);
    output.writeString(this.subjectType);
    output.writeFieldEnd();
  }
  if (this.isRead !== null && this.isRead !== undefined) {
    output.writeFieldBegin('isRead', Thrift.Type.BOOL, 8);
    output.writeBool(this.isRead);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 9);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 10);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.STRING, 11);
    output.writeString(this.updatedAt);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 12);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.userRead !== null && this.userRead !== undefined) {
    output.writeFieldBegin('userRead', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.userRead.length);
    for (var iter54 in this.userRead)
    {
      if (this.userRead.hasOwnProperty(iter54))
      {
        iter54 = this.userRead[iter54];
        output.writeString(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userDeleted !== null && this.userDeleted !== undefined) {
    output.writeFieldBegin('userDeleted', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.userDeleted.length);
    for (var iter55 in this.userDeleted)
    {
      if (this.userDeleted.hasOwnProperty(iter55))
      {
        iter55 = this.userDeleted[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.models.NotificationFilter = module.exports.NotificationFilter = function(args) {
  this.title = null;
  this.message = null;
  this.userId = null;
  this.type = null;
  this.subjectId = null;
  this.isRead = null;
  this.createdFrom = null;
  this.createdTo = null;
  this.status = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.isRead !== undefined && args.isRead !== null) {
      this.isRead = args.isRead;
    }
    if (args.createdFrom !== undefined && args.createdFrom !== null) {
      this.createdFrom = args.createdFrom;
    }
    if (args.createdTo !== undefined && args.createdTo !== null) {
      this.createdTo = args.createdTo;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
nexx.models.NotificationFilter.prototype = {};
nexx.models.NotificationFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isRead = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createdFrom = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createdTo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.models.NotificationFilter.prototype.write = function(output) {
  output.writeStructBegin('NotificationFilter');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 3);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 4);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 5);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.isRead !== null && this.isRead !== undefined) {
    output.writeFieldBegin('isRead', Thrift.Type.BOOL, 6);
    output.writeBool(this.isRead);
    output.writeFieldEnd();
  }
  if (this.createdFrom !== null && this.createdFrom !== undefined) {
    output.writeFieldBegin('createdFrom', Thrift.Type.STRING, 7);
    output.writeString(this.createdFrom);
    output.writeFieldEnd();
  }
  if (this.createdTo !== null && this.createdTo !== undefined) {
    output.writeFieldBegin('createdTo', Thrift.Type.STRING, 8);
    output.writeString(this.createdTo);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 9);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.models.PaginationNotifications = module.exports.PaginationNotifications = function(args) {
  this.pagination = null;
  this.data = null;
  if (args) {
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new pagination_ttypes.Pagination(args.pagination);
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [ttypes.Notification]);
    }
  }
};
nexx.models.PaginationNotifications.prototype = {};
nexx.models.PaginationNotifications.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new pagination_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.data = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Notification();
          elem62.read(input);
          this.data.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.models.PaginationNotifications.prototype.write = function(output) {
  output.writeStructBegin('PaginationNotifications');
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 1);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter63 in this.data)
    {
      if (this.data.hasOwnProperty(iter63))
      {
        iter63 = this.data[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

