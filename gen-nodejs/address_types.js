//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof nexx === 'undefined') {
  nexx = {};
}
if (typeof nexx.shared === 'undefined') {
  nexx.shared = {};
}
nexx.shared.Address = module.exports.Address = function(args) {
  this.uid = null;
  this.address = null;
  this.ward = null;
  this.wardCode = null;
  this.district = null;
  this.districtCode = null;
  this.province = null;
  this.provinceCode = null;
  this.countryCode = null;
  this.locationId = null;
  this.latitude = null;
  this.longitude = null;
  this.type = null;
  this.userId = null;
  this.parentId = null;
  this.subjectId = null;
  this.metadata = null;
  this.createdAt = null;
  this.updatedAt = null;
  this.createdBy = null;
  this.updatedBy = null;
  this.status = 0;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.ward !== undefined && args.ward !== null) {
      this.ward = args.ward;
    }
    if (args.wardCode !== undefined && args.wardCode !== null) {
      this.wardCode = args.wardCode;
    }
    if (args.district !== undefined && args.district !== null) {
      this.district = args.district;
    }
    if (args.districtCode !== undefined && args.districtCode !== null) {
      this.districtCode = args.districtCode;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.provinceCode !== undefined && args.provinceCode !== null) {
      this.provinceCode = args.provinceCode;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.locationId !== undefined && args.locationId !== null) {
      this.locationId = args.locationId;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = Thrift.copyList(args.type, [null]);
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.parentId !== undefined && args.parentId !== null) {
      this.parentId = args.parentId;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.updatedBy !== undefined && args.updatedBy !== null) {
      this.updatedBy = args.updatedBy;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
nexx.shared.Address.prototype = {};
nexx.shared.Address.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ward = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.wardCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.district = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.districtCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.provinceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.locationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.type = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.type.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.parentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.updatedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.updatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.Address.prototype.write = function(output) {
  output.writeStructBegin('Address');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.ward !== null && this.ward !== undefined) {
    output.writeFieldBegin('ward', Thrift.Type.STRING, 3);
    output.writeString(this.ward);
    output.writeFieldEnd();
  }
  if (this.wardCode !== null && this.wardCode !== undefined) {
    output.writeFieldBegin('wardCode', Thrift.Type.I32, 4);
    output.writeI32(this.wardCode);
    output.writeFieldEnd();
  }
  if (this.district !== null && this.district !== undefined) {
    output.writeFieldBegin('district', Thrift.Type.STRING, 5);
    output.writeString(this.district);
    output.writeFieldEnd();
  }
  if (this.districtCode !== null && this.districtCode !== undefined) {
    output.writeFieldBegin('districtCode', Thrift.Type.STRING, 6);
    output.writeString(this.districtCode);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 7);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.provinceCode !== null && this.provinceCode !== undefined) {
    output.writeFieldBegin('provinceCode', Thrift.Type.STRING, 8);
    output.writeString(this.provinceCode);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 9);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.locationId !== null && this.locationId !== undefined) {
    output.writeFieldBegin('locationId', Thrift.Type.STRING, 10);
    output.writeString(this.locationId);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.type.length);
    for (var iter7 in this.type)
    {
      if (this.type.hasOwnProperty(iter7))
      {
        iter7 = this.type[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 14);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.STRING, 15);
    output.writeString(this.parentId);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 16);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 17);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 18);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.STRING, 19);
    output.writeString(this.updatedAt);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 20);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.updatedBy !== null && this.updatedBy !== undefined) {
    output.writeFieldBegin('updatedBy', Thrift.Type.STRING, 21);
    output.writeString(this.updatedBy);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 22);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.AddressInsert = module.exports.AddressInsert = function(args) {
  this.uid = null;
  this.address = null;
  this.ward = null;
  this.wardCode = null;
  this.district = null;
  this.districtCode = null;
  this.province = null;
  this.provinceCode = null;
  this.countryCode = null;
  this.locationId = null;
  this.latitude = null;
  this.longitude = null;
  this.type = null;
  this.userId = null;
  this.parentId = null;
  this.subjectId = null;
  this.metadata = null;
  this.createdBy = null;
  this.updatedBy = null;
  this.status = 0;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.ward !== undefined && args.ward !== null) {
      this.ward = args.ward;
    }
    if (args.wardCode !== undefined && args.wardCode !== null) {
      this.wardCode = args.wardCode;
    }
    if (args.district !== undefined && args.district !== null) {
      this.district = args.district;
    }
    if (args.districtCode !== undefined && args.districtCode !== null) {
      this.districtCode = args.districtCode;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.provinceCode !== undefined && args.provinceCode !== null) {
      this.provinceCode = args.provinceCode;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.locationId !== undefined && args.locationId !== null) {
      this.locationId = args.locationId;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = Thrift.copyList(args.type, [null]);
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.parentId !== undefined && args.parentId !== null) {
      this.parentId = args.parentId;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.updatedBy !== undefined && args.updatedBy !== null) {
      this.updatedBy = args.updatedBy;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
nexx.shared.AddressInsert.prototype = {};
nexx.shared.AddressInsert.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ward = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.wardCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.district = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.districtCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.provinceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.locationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.type = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.type.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.parentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.updatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.AddressInsert.prototype.write = function(output) {
  output.writeStructBegin('AddressInsert');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.ward !== null && this.ward !== undefined) {
    output.writeFieldBegin('ward', Thrift.Type.STRING, 3);
    output.writeString(this.ward);
    output.writeFieldEnd();
  }
  if (this.wardCode !== null && this.wardCode !== undefined) {
    output.writeFieldBegin('wardCode', Thrift.Type.I32, 4);
    output.writeI32(this.wardCode);
    output.writeFieldEnd();
  }
  if (this.district !== null && this.district !== undefined) {
    output.writeFieldBegin('district', Thrift.Type.STRING, 5);
    output.writeString(this.district);
    output.writeFieldEnd();
  }
  if (this.districtCode !== null && this.districtCode !== undefined) {
    output.writeFieldBegin('districtCode', Thrift.Type.STRING, 6);
    output.writeString(this.districtCode);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 7);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.provinceCode !== null && this.provinceCode !== undefined) {
    output.writeFieldBegin('provinceCode', Thrift.Type.STRING, 8);
    output.writeString(this.provinceCode);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 9);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.locationId !== null && this.locationId !== undefined) {
    output.writeFieldBegin('locationId', Thrift.Type.STRING, 10);
    output.writeString(this.locationId);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.type.length);
    for (var iter15 in this.type)
    {
      if (this.type.hasOwnProperty(iter15))
      {
        iter15 = this.type[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 14);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.STRING, 15);
    output.writeString(this.parentId);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 16);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 17);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 18);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.updatedBy !== null && this.updatedBy !== undefined) {
    output.writeFieldBegin('updatedBy', Thrift.Type.STRING, 19);
    output.writeString(this.updatedBy);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 20);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.AddressForm = module.exports.AddressForm = function(args) {
  this.uid = null;
  this.address = null;
  this.ward = null;
  this.wardCode = null;
  this.district = null;
  this.districtCode = null;
  this.province = null;
  this.provinceCode = null;
  this.countryCode = null;
  this.locationId = null;
  this.latitude = null;
  this.longitude = null;
  this.type = null;
  this.userId = null;
  this.parentId = null;
  this.subjectId = null;
  this.metadata = null;
  this.createdBy = null;
  this.updatedBy = null;
  this.status = 0;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field uid is unset!');
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.ward !== undefined && args.ward !== null) {
      this.ward = args.ward;
    }
    if (args.wardCode !== undefined && args.wardCode !== null) {
      this.wardCode = args.wardCode;
    }
    if (args.district !== undefined && args.district !== null) {
      this.district = args.district;
    }
    if (args.districtCode !== undefined && args.districtCode !== null) {
      this.districtCode = args.districtCode;
    }
    if (args.province !== undefined && args.province !== null) {
      this.province = args.province;
    }
    if (args.provinceCode !== undefined && args.provinceCode !== null) {
      this.provinceCode = args.provinceCode;
    }
    if (args.countryCode !== undefined && args.countryCode !== null) {
      this.countryCode = args.countryCode;
    }
    if (args.locationId !== undefined && args.locationId !== null) {
      this.locationId = args.locationId;
    }
    if (args.latitude !== undefined && args.latitude !== null) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined && args.longitude !== null) {
      this.longitude = args.longitude;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = Thrift.copyList(args.type, [null]);
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.parentId !== undefined && args.parentId !== null) {
      this.parentId = args.parentId;
    }
    if (args.subjectId !== undefined && args.subjectId !== null) {
      this.subjectId = args.subjectId;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = args.metadata;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.updatedBy !== undefined && args.updatedBy !== null) {
      this.updatedBy = args.updatedBy;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
nexx.shared.AddressForm.prototype = {};
nexx.shared.AddressForm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ward = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.wardCode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.district = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.districtCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.province = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.provinceCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.countryCode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.locationId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.type = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.type.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.parentId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.subjectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.metadata = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.updatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.AddressForm.prototype.write = function(output) {
  output.writeStructBegin('AddressForm');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.ward !== null && this.ward !== undefined) {
    output.writeFieldBegin('ward', Thrift.Type.STRING, 3);
    output.writeString(this.ward);
    output.writeFieldEnd();
  }
  if (this.wardCode !== null && this.wardCode !== undefined) {
    output.writeFieldBegin('wardCode', Thrift.Type.I32, 4);
    output.writeI32(this.wardCode);
    output.writeFieldEnd();
  }
  if (this.district !== null && this.district !== undefined) {
    output.writeFieldBegin('district', Thrift.Type.STRING, 5);
    output.writeString(this.district);
    output.writeFieldEnd();
  }
  if (this.districtCode !== null && this.districtCode !== undefined) {
    output.writeFieldBegin('districtCode', Thrift.Type.STRING, 6);
    output.writeString(this.districtCode);
    output.writeFieldEnd();
  }
  if (this.province !== null && this.province !== undefined) {
    output.writeFieldBegin('province', Thrift.Type.STRING, 7);
    output.writeString(this.province);
    output.writeFieldEnd();
  }
  if (this.provinceCode !== null && this.provinceCode !== undefined) {
    output.writeFieldBegin('provinceCode', Thrift.Type.STRING, 8);
    output.writeString(this.provinceCode);
    output.writeFieldEnd();
  }
  if (this.countryCode !== null && this.countryCode !== undefined) {
    output.writeFieldBegin('countryCode', Thrift.Type.STRING, 9);
    output.writeString(this.countryCode);
    output.writeFieldEnd();
  }
  if (this.locationId !== null && this.locationId !== undefined) {
    output.writeFieldBegin('locationId', Thrift.Type.STRING, 10);
    output.writeString(this.locationId);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRING, this.type.length);
    for (var iter23 in this.type)
    {
      if (this.type.hasOwnProperty(iter23))
      {
        iter23 = this.type[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 14);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.parentId !== null && this.parentId !== undefined) {
    output.writeFieldBegin('parentId', Thrift.Type.STRING, 15);
    output.writeString(this.parentId);
    output.writeFieldEnd();
  }
  if (this.subjectId !== null && this.subjectId !== undefined) {
    output.writeFieldBegin('subjectId', Thrift.Type.STRING, 16);
    output.writeString(this.subjectId);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.STRING, 17);
    output.writeString(this.metadata);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 18);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.updatedBy !== null && this.updatedBy !== undefined) {
    output.writeFieldBegin('updatedBy', Thrift.Type.STRING, 19);
    output.writeString(this.updatedBy);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 20);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.SimpleAddress = module.exports.SimpleAddress = function(args) {
  this.uid = null;
  this.address = null;
  this.coordinates = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.coordinates !== undefined && args.coordinates !== null) {
      this.coordinates = Thrift.copyList(args.coordinates, [null]);
    }
  }
};
nexx.shared.SimpleAddress.prototype = {};
nexx.shared.SimpleAddress.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.coordinates = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readDouble();
          this.coordinates.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.SimpleAddress.prototype.write = function(output) {
  output.writeStructBegin('SimpleAddress');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.coordinates !== null && this.coordinates !== undefined) {
    output.writeFieldBegin('coordinates', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.coordinates.length);
    for (var iter31 in this.coordinates)
    {
      if (this.coordinates.hasOwnProperty(iter31))
      {
        iter31 = this.coordinates[iter31];
        output.writeDouble(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

