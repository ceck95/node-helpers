//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
if (typeof nexx === 'undefined') {
  nexx = {};
}
if (typeof nexx.shared === 'undefined') {
  nexx.shared = {};
}
nexx.shared.SessionInsert = module.exports.SessionInsert = function(args) {
  this.userId = null;
  this.socketId = null;
  this.type = null;
  this.status = null;
  this.socketServerId = null;
  this.nexid = null;
  this.deviceToken = null;
  this.lastActive = null;
  this.platform = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field userId is unset!');
    }
    if (args.socketId !== undefined && args.socketId !== null) {
      this.socketId = args.socketId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field socketId is unset!');
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field type is unset!');
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field status is unset!');
    }
    if (args.socketServerId !== undefined && args.socketServerId !== null) {
      this.socketServerId = args.socketServerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field socketServerId is unset!');
    }
    if (args.nexid !== undefined && args.nexid !== null) {
      this.nexid = args.nexid;
    }
    if (args.deviceToken !== undefined && args.deviceToken !== null) {
      this.deviceToken = args.deviceToken;
    }
    if (args.lastActive !== undefined && args.lastActive !== null) {
      this.lastActive = args.lastActive;
    }
    if (args.platform !== undefined && args.platform !== null) {
      this.platform = args.platform;
    }
  }
};
nexx.shared.SessionInsert.prototype = {};
nexx.shared.SessionInsert.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.socketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.socketServerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.nexid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.deviceToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.lastActive = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.platform = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.SessionInsert.prototype.write = function(output) {
  output.writeStructBegin('SessionInsert');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.socketId !== null && this.socketId !== undefined) {
    output.writeFieldBegin('socketId', Thrift.Type.STRING, 2);
    output.writeString(this.socketId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.socketServerId !== null && this.socketServerId !== undefined) {
    output.writeFieldBegin('socketServerId', Thrift.Type.I32, 5);
    output.writeI32(this.socketServerId);
    output.writeFieldEnd();
  }
  if (this.nexid !== null && this.nexid !== undefined) {
    output.writeFieldBegin('nexid', Thrift.Type.STRING, 6);
    output.writeString(this.nexid);
    output.writeFieldEnd();
  }
  if (this.deviceToken !== null && this.deviceToken !== undefined) {
    output.writeFieldBegin('deviceToken', Thrift.Type.STRING, 7);
    output.writeString(this.deviceToken);
    output.writeFieldEnd();
  }
  if (this.lastActive !== null && this.lastActive !== undefined) {
    output.writeFieldBegin('lastActive', Thrift.Type.STRING, 8);
    output.writeString(this.lastActive);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.STRING, 9);
    output.writeString(this.platform);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.SessionForm = module.exports.SessionForm = function(args) {
  this.socketId = null;
  this.type = null;
  this.status = null;
  this.socketServerId = null;
  this.nexid = null;
  this.deviceToken = null;
  this.lastActive = null;
  this.platform = null;
  if (args) {
    if (args.socketId !== undefined && args.socketId !== null) {
      this.socketId = args.socketId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.socketServerId !== undefined && args.socketServerId !== null) {
      this.socketServerId = args.socketServerId;
    }
    if (args.nexid !== undefined && args.nexid !== null) {
      this.nexid = args.nexid;
    }
    if (args.deviceToken !== undefined && args.deviceToken !== null) {
      this.deviceToken = args.deviceToken;
    }
    if (args.lastActive !== undefined && args.lastActive !== null) {
      this.lastActive = args.lastActive;
    }
    if (args.platform !== undefined && args.platform !== null) {
      this.platform = args.platform;
    }
  }
};
nexx.shared.SessionForm.prototype = {};
nexx.shared.SessionForm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.socketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.socketServerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.nexid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.deviceToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.lastActive = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.platform = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.SessionForm.prototype.write = function(output) {
  output.writeStructBegin('SessionForm');
  if (this.socketId !== null && this.socketId !== undefined) {
    output.writeFieldBegin('socketId', Thrift.Type.STRING, 1);
    output.writeString(this.socketId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 3);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.socketServerId !== null && this.socketServerId !== undefined) {
    output.writeFieldBegin('socketServerId', Thrift.Type.I32, 4);
    output.writeI32(this.socketServerId);
    output.writeFieldEnd();
  }
  if (this.nexid !== null && this.nexid !== undefined) {
    output.writeFieldBegin('nexid', Thrift.Type.STRING, 5);
    output.writeString(this.nexid);
    output.writeFieldEnd();
  }
  if (this.deviceToken !== null && this.deviceToken !== undefined) {
    output.writeFieldBegin('deviceToken', Thrift.Type.STRING, 6);
    output.writeString(this.deviceToken);
    output.writeFieldEnd();
  }
  if (this.lastActive !== null && this.lastActive !== undefined) {
    output.writeFieldBegin('lastActive', Thrift.Type.STRING, 7);
    output.writeString(this.lastActive);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.STRING, 8);
    output.writeString(this.platform);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.SessionQuery = module.exports.SessionQuery = function(args) {
  this.socketId = null;
  this.userId = null;
  this.type = null;
  this.status = null;
  this.socketServerId = null;
  this.nexid = null;
  if (args) {
    if (args.socketId !== undefined && args.socketId !== null) {
      this.socketId = args.socketId;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.socketServerId !== undefined && args.socketServerId !== null) {
      this.socketServerId = args.socketServerId;
    }
    if (args.nexid !== undefined && args.nexid !== null) {
      this.nexid = args.nexid;
    }
  }
};
nexx.shared.SessionQuery.prototype = {};
nexx.shared.SessionQuery.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.socketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.socketServerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.nexid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.SessionQuery.prototype.write = function(output) {
  output.writeStructBegin('SessionQuery');
  if (this.socketId !== null && this.socketId !== undefined) {
    output.writeFieldBegin('socketId', Thrift.Type.STRING, 1);
    output.writeString(this.socketId);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 4);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.socketServerId !== null && this.socketServerId !== undefined) {
    output.writeFieldBegin('socketServerId', Thrift.Type.I32, 5);
    output.writeI32(this.socketServerId);
    output.writeFieldEnd();
  }
  if (this.nexid !== null && this.nexid !== undefined) {
    output.writeFieldBegin('nexid', Thrift.Type.STRING, 6);
    output.writeString(this.nexid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

nexx.shared.Session = module.exports.Session = function(args) {
  this.uid = null;
  this.userId = null;
  this.socketId = null;
  this.createdAt = null;
  this.updatedAt = null;
  this.lastActive = null;
  this.type = null;
  this.status = null;
  this.socketServerId = null;
  this.nexid = null;
  this.deviceToken = null;
  this.platform = null;
  if (args) {
    if (args.uid !== undefined && args.uid !== null) {
      this.uid = args.uid;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.socketId !== undefined && args.socketId !== null) {
      this.socketId = args.socketId;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.updatedAt !== undefined && args.updatedAt !== null) {
      this.updatedAt = args.updatedAt;
    }
    if (args.lastActive !== undefined && args.lastActive !== null) {
      this.lastActive = args.lastActive;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.socketServerId !== undefined && args.socketServerId !== null) {
      this.socketServerId = args.socketServerId;
    }
    if (args.nexid !== undefined && args.nexid !== null) {
      this.nexid = args.nexid;
    }
    if (args.deviceToken !== undefined && args.deviceToken !== null) {
      this.deviceToken = args.deviceToken;
    }
    if (args.platform !== undefined && args.platform !== null) {
      this.platform = args.platform;
    }
  }
};
nexx.shared.Session.prototype = {};
nexx.shared.Session.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.uid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.socketId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.updatedAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.lastActive = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.socketServerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.nexid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.deviceToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.platform = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

nexx.shared.Session.prototype.write = function(output) {
  output.writeStructBegin('Session');
  if (this.uid !== null && this.uid !== undefined) {
    output.writeFieldBegin('uid', Thrift.Type.STRING, 1);
    output.writeString(this.uid);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.socketId !== null && this.socketId !== undefined) {
    output.writeFieldBegin('socketId', Thrift.Type.STRING, 3);
    output.writeString(this.socketId);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 4);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.updatedAt !== null && this.updatedAt !== undefined) {
    output.writeFieldBegin('updatedAt', Thrift.Type.STRING, 5);
    output.writeString(this.updatedAt);
    output.writeFieldEnd();
  }
  if (this.lastActive !== null && this.lastActive !== undefined) {
    output.writeFieldBegin('lastActive', Thrift.Type.STRING, 6);
    output.writeString(this.lastActive);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 7);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 8);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.socketServerId !== null && this.socketServerId !== undefined) {
    output.writeFieldBegin('socketServerId', Thrift.Type.I32, 9);
    output.writeI32(this.socketServerId);
    output.writeFieldEnd();
  }
  if (this.nexid !== null && this.nexid !== undefined) {
    output.writeFieldBegin('nexid', Thrift.Type.STRING, 10);
    output.writeString(this.nexid);
    output.writeFieldEnd();
  }
  if (this.deviceToken !== null && this.deviceToken !== undefined) {
    output.writeFieldBegin('deviceToken', Thrift.Type.STRING, 11);
    output.writeString(this.deviceToken);
    output.writeFieldEnd();
  }
  if (this.platform !== null && this.platform !== undefined) {
    output.writeFieldBegin('platform', Thrift.Type.STRING, 12);
    output.writeString(this.platform);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

